require 'logger'
require 'sprockets/standalone'
require 'fileutils'
require 'v8'
require 'securerandom'
require 'yaml'
require 'tilt'
require 'gemoji'
require 'handlebars_assets'
require 'json'
require 'highline/import'

module Resume
  class Cipher
    include Singleton

    attr_reader :payload_key
    attr_reader :keys

    def initialize
      @payload_key = SecureRandom.hex(16)

      keys_info = YAML.load_file(old_keys_path) rescue []

      if keys_info.empty? || agree('Would you like to add a new symmetric key? (N/y)') { |q| q.default = 'n' }
        keys_info << {
          recipient: ask('For whom?').to_s,
          date:      Time.now.to_s,
          key:       SecureRandom.hex(16)
        }

        Logger.new($stdout).info "New key: #{keys_info.last[:key]}"

        File.open(old_keys_path, 'w') { |fd| fd.puts keys_info.to_yaml }
      end

      @keys = keys_info.map { |i| i[:key] }
    end

    def encrypt(data, key = @payload_key, salt = "")
      v8.eval("CryptoJS.AES.encrypt('#{data}', '#{key}#{salt}')")
    end

  private

    def old_keys_path
      File.expand_path('../data/old-keys.yml', __FILE__)
    end

    def cryptojs_path
      File.expand_path('../vendor/js/cryptojs-aes.min.js', __FILE__)
    end

    def v8
      @v8 ||= begin
        v8 = V8::Context.new
        v8.load cryptojs_path
        v8
      end
    end
  end

  class ERBTemplate < Tilt::ERBTemplate
    def evaluate(scope, locals, &block)
      super(scope, locals.merge(globals), &block)
    end

  private

    def globals
      @globals ||= begin
        data     = YAML.load_file(File.expand_path('../data/resume.yml', __FILE__))
        cipher   = Cipher.instance
        { cipher: cipher, data: cipher.encrypt(data.to_json) }
      end
    end
  end

  class RakeTask < ::Sprockets::Standalone::RakeTask
    def initialize(name)
      super(name) do |task, sprockets|
        task.assets  = %w(js/resume.js css/style.css resume.html emoji/email.png emoji/octocat.png emoji/iphone.png emoji/house.png emoji/see_no_evil.png)
        task.sources = %w(assets vendor) + [Emoji.images_path]
        task.digest  = false

        yield task, sprockets if block_given?
      end
    end
  end

  class DebugERBTemplate < ERBTemplate
  private
    def globals
      @globals ||= super.merge({ :env => :debug })
    end
  end

  class DebugTask < RakeTask
    OUTPUT_DIR = File.expand_path('../build', __FILE__)

    def initialize
      super(:debug) do |task, sprockets|
        task.output   = OUTPUT_DIR
        task.compress = false
        sprockets.register_engine '.erb', DebugERBTemplate
      end
    end
  end

  class ReleaseERBTemplate < ERBTemplate
  private
    def globals
      @globals ||= super.merge({ :env => :release })
    end
  end

  class ReleaseTask < RakeTask
    OUTPUT_DIR = File.expand_path('../..', __FILE__)

    def initialize
      super(:release) do |task, sprockets|
        task.output              = OUTPUT_DIR
        #task.compress = true
        sprockets.js_compressor  = :uglifier
        sprockets.css_compressor = :sass
        sprockets.register_engine '.erb', ReleaseERBTemplate
      end
    end
  end
end

Resume::DebugTask.new
Resume::ReleaseTask.new

task :clobber do
  FileUtils.rm_rf Resume::DebugTask::OUTPUT_DIR
  FileUtils.rm_rf Resume::DebugTask::OUTPUT_DIR
end

task :default => ['debug:clobber', 'debug:compile']
